name: Exploring Variables and Secrets

on:
    workflow_dispatch:
    # schedule:
    #     - cron: "*/1 * * * *"
    # push
env:
    CONTAINER_REGISTRY: docker.io
    # DOCKER_USERNAME: joey97
    IMAGE_NAME: nginxdemos/hello

jobs:
     ####################### environmental variables at JOB levels #############################
    docker:
        runs-on: ubuntu-latest
        steps:
            - name: Docker Build
              run: echo docker build -t ${{env.CONTAINER_REGISTRY}}/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

            - name: Docker Login
              run: echo docker login --username=${{ vars.DOCKER_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }}

            - name: Docker Publish
              run: echo docker push $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest

    deploy:
        needs: docker
        concurrency: 
            group: production-deployment
            cancel-in-progress: true
        runs-on: ubuntu-latest
        steps:
            - name: Docker Run #runs for 10 mins
              run: |
                echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/${{ vars.DOCKER_USERNAME }}/$IMAGE_NAME:latest
                sleep 600s 









#The first way the workflow is..from the below we observe that multiple words are used so many times..e.g docker.io/dockerUsername/imageName:

            #   docker:
            #     runs-on: ubuntu-latest
            #     steps:
            #         - name: Docker Build
            #           run: docker build -t docker.io/dockerUsername/imageName:latest
        
            #         - name: Docker Login
            #           run: docker login --username=dockerUsername --password=s3cUrePassw0rd
        
            #         - name: Docker publish
            #           run: docker push docker.io/dockerUsername/imageName:latest
        
            # deploy:
            #     needs: docker
            #     runs-on: ubuntu-latest
            #     steps:
            #         - name: Docker run
            #           run: docker run -d -p 8080:80 docker.io/dockerUsername/imageName:latest


####################### environmental variables at STEP level #############################
# docker:
#     runs-on: ubuntu-latest
#     steps:
#         - name: Docker Build
#           env:
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: joey97
#             IMAGE_NAME: nginxdemos/hello
#           run: docker build -t ${{env.CONTAINER_REGISTRY}}/$DOCKER_USERNAME/$IMAGE_NAME:latest

#         - name: Docker Login
#           env:
#             DOCKER_USERNAME: joey97
#             DOCKER_PASSWORD: Okoify@123
#           run: docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#         - name: Docker Publish
#           env:
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: joey97
#             IMAGE_NAME: nginxdemos/hello
#           run: docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

# deploy:
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:
#         - name: Docker Run
#           env:
#             CONTAINER_REGISTRY: docker.io
#             DOCKER_USERNAME: joey97
#             IMAGE_NAME: nginxdemos/hello
#           run: docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

 ####################### environmental variables at JOB level #############################
#  docker:
#     env:
#         CONTAINER_REGISTRY: docker.io
#         DOCKER_USERNAME: joey97
#         IMAGE_NAME: nginxdemos/hello
#     runs-on: ubuntu-latest
#     steps:
#         - name: Docker Build
#           run: echo docker build -t ${{env.CONTAINER_REGISTRY}}/$DOCKER_USERNAME/$IMAGE_NAME:latest

#         - name: Docker Login
#           env:
#             DOCKER_PASSWORD: Okoify@123
#           run: echo docker login --username=$DOCKER_USERNAME --password=$DOCKER_PASSWORD

#         - name: Docker Publish
#           run: echo docker push $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest

# deploy:
#     env:
#         CONTAINER_REGISTRY: docker.io
#         DOCKER_USERNAME: joey97
#         IMAGE_NAME: nginxdemos/hello
#     needs: docker
#     runs-on: ubuntu-latest
#     steps:
#         - name: Docker Run
#           run: echo docker run -d -p 8080:80 $CONTAINER_REGISTRY/$DOCKER_USERNAME/$IMAGE_NAME:latest